import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import com.ftn.cdss.model.rules.PossibleDisease;
import com.ftn.cdss.model.Symptom;
import com.ftn.cdss.model.Diagnosis;
import com.ftn.cdss.model.Medicine;
import com.ftn.cdss.model.Disease;
import com.ftn.cdss.model.rules.FoundDisease;
import com.ftn.cdss.model.rules.FoundDiseases;
import java.util.Collections;
import com.ftn.cdss.util.DetectedDiseasesComparator;
import com.ftn.cdss.util.DateUtil;

//---------------------------------FIRST TYPE--------------------------------------

rule "Prehlada"
    lock-on-active
    agenda-group "symptoms"
    when
       $list: ArrayList($listSize: size>=4) from collect (
           Symptom("curenje iz nosa" contains name.toLowerCase()
                   ||"bol u grlu" contains name.toLowerCase()
                   || "glavobolja" contains name.toLowerCase()
                   || "kijanje" contains name.toLowerCase()
                   || "kašalj" contains name.toLowerCase()
           )
       )
    then
        final FoundDisease foundDisease = new FoundDisease();
        foundDisease.setNumOfSymptoms(5);
        foundDisease.setNumOfFulfilled($listSize);
        foundDisease.setDiseaseName("Prehlada");

        insert(foundDisease);
end

rule "Groznica"
    lock-on-active
    agenda-group "symptoms"
    when
       $list: ArrayList($listSize: size>=4) from collect (
           Symptom("curenje iz nosa" contains name.toLowerCase()
                   ||"bol u grlu" contains name.toLowerCase()
                   || "glavobolja" contains name.toLowerCase()
                   || "kijanje" contains name.toLowerCase()
                   || "kašalj" contains name.toLowerCase()
                   || "temperatura" contains name.toLowerCase() && value > 38
                   || "drhtavica" contains name.toLowerCase()
           )
       )
    then
        final FoundDisease foundDisease = new FoundDisease();
        foundDisease.setNumOfSymptoms(7);
        foundDisease.setNumOfFulfilled($listSize);
        foundDisease.setDiseaseName("Groznica");

        insert(foundDisease);
end

rule "Upala krajnika"
    lock-on-active
    agenda-group "symptoms"
    when
        $list: ArrayList($listSize: size>=4) from collect (
            Symptom("bol u grlu" contains name.toLowerCase()
                    ||"bol koji se širi do ušiju" contains name.toLowerCase()
                    || "glavobolja" contains name.toLowerCase()
                    || "temperatura" contains name.toLowerCase() && value > 40 && value < 41
                    || "drhtavica" contains name.toLowerCase()
                    || "gubitak apetita" contains name.toLowerCase()
                    || "umor" contains name.toLowerCase()
                    || "žuti sekret iz nosa" contains name.toLowerCase()
            )
        )
    then
         final FoundDisease foundDisease = new FoundDisease();
         foundDisease.setNumOfSymptoms(8);
         foundDisease.setNumOfFulfilled($listSize);
         foundDisease.setDiseaseName("Upala krajnika");

        insert(foundDisease);
end

rule "Sinusna infekcija"
    lock-on-active
    agenda-group "symptoms"
    when
        $n2:Number() from accumulate(Diagnosis((disease.getName().equals("Prehlada")
                                               || disease.getName().equals("Groznica"))
                                               && new Date() < DateUtil.addDate(date, "d", 60)),
                      init(int num = 0;),
                      action(num = 1;),
                      result(num)
                    )
        $list: ArrayList($listSize: size, ((int)$listSize + $n2)>=4) from collect (
                    Symptom("oticanje oko očiju" contains name.toLowerCase()
                            ||"glavobolja" contains name.toLowerCase()
                            || "žuti sekret iz nosa" contains name.toLowerCase()
                            || "bol u grlu" contains name.toLowerCase()
                            || "temperatura" contains name.toLowerCase() && value > 38
                            || "kašalj" contains name.toLowerCase()
                    )
                )
    then
         final FoundDisease foundDisease = new FoundDisease();
         foundDisease.setNumOfSymptoms(7);
         foundDisease.setNumOfFulfilled($listSize + (int)$n2);
         foundDisease.setDiseaseName("Sinusna infekcija");

         insert(foundDisease);
end


//---------------------------------SECOND TYPE-------------------------------------------------------------------------

rule "Hipertenzija"
    lock-on-active
    agenda-group "symptoms"
    when
        Number($n2:intValue >= 10) from accumulate($diag: Diagnosis(new Date() < DateUtil.addDate(date, "m", 6)
                                                 && symptomsInput != null
                                                 &&symptomsInput.toLowerCase() contains "visok pritisak"),
                      count($diag)
                    )
    then
         final FoundDisease foundDisease = new FoundDisease();
         foundDisease.setNumOfSymptoms(1);
         foundDisease.setNumOfFulfilled(1);
         foundDisease.setDiseaseName("Hipertenzija");

         insert(foundDisease);
end

rule "Dijabetes"
    lock-on-active
    agenda-group "symptoms"
    when
        $list: ArrayList($listSize: size, $listSize==4) from collect (
                    Symptom("često uriniranje" contains name.toLowerCase()
                            ||"zamor" contains name.toLowerCase()
                            || "gubitak telesne težine" contains name.toLowerCase()
                            || "mučnina i povraćanje" contains name.toLowerCase()
                    )
                )
    then
         final FoundDisease foundDisease = new FoundDisease();
         foundDisease.setNumOfSymptoms(4);
         foundDisease.setNumOfFulfilled($listSize);
         foundDisease.setDiseaseName("Dijabetes");

         insert(foundDisease);
end

//---------------------------------THIRD TYPE------------------------------------------------------------------

rule "Hronična bubrežna bolest"
    lock-on-active
    agenda-group "symptoms"
    when
        Number($n2:intValue >= 1) from accumulate(Diagnosis(disease.getName().equals("Dijabetes")
                                                 || disease.getName().equals("Hipertenzija")
                                                 && new Date() > DateUtil.addDate(date, "m", 6)),
                      init(int num = 0;),
                      action(num = 1;),
                      result(num)
                    )
        $list: ArrayList($listSize: size, $listSize >= 2) from collect (
                    Symptom("zamor" contains name.toLowerCase()
                            ||"nocturia" contains name.toLowerCase()
                            || "otoci nogu i zglobova" contains name.toLowerCase()
                            || "gušenje" contains name.toLowerCase()
                            || "bol u grudima" contains name.toLowerCase()
                    )
                )
    then
         final FoundDisease foundDisease = new FoundDisease();
         foundDisease.setNumOfSymptoms(7);
         foundDisease.setNumOfFulfilled($listSize + (int)$n2);
         foundDisease.setDiseaseName("Hronična bubrežna bolest");

         insert(foundDisease);
end


rule "Akutna bubrežna povreda"
    lock-on-active
    agenda-group "symptoms"
    when
        $oper: Number() from accumulate(Symptom(name.toLowerCase() contains "operacij"),
                     init(int num = 0;),
                     action(num = 1;),
                     result(num)
                   )
        $temp: Number() from accumulate(Diagnosis(new Date() < DateUtil.addDate(date, "d", 14),
                                                    $symptoms: disease.getCommonSymptoms()),
                      init(int num = 0;),
                      action(for(Object symptom:$symptoms){
                                if(((Symptom)symptom).getName().equals("Temperatura")){
                                    num = 1;
                                }
                            }),
                      result(num)
                    )
        $ant: Number() from accumulate(Diagnosis(new Date() < DateUtil.addDate(date, "d", 21),
                                                            $drugs: medicines),
                              init(int num = 0;),
                              action(for(Object drug:$drugs){
                                        if(((Medicine)drug).getType().equals("Antibiotik")){
                                            num = 1;
                                            break;
                                        }
                                    }),
                              result(num)
                            )
        ArrayList($listSize: size, $listSize >= 2) from collect (
                    Symptom("zamor" contains name.toLowerCase()
                            ||"dijareja" contains name.toLowerCase()
                            || "otoci nogu i zglobova" contains name.toLowerCase()
                            || "gušenje" contains name.toLowerCase()
                    )
                )
    then
         final FoundDisease foundDisease = new FoundDisease();
         foundDisease.setNumOfSymptoms(7);
         foundDisease.setNumOfFulfilled($listSize + (int)$oper + (int)$temp + (int)$ant);
         foundDisease.setDiseaseName("Akutna bubrežna povreda");

         insert(foundDisease);
end

//---------------------------------------------------------Diseases priorities---------------------------------------

rule "Found diseses list does not exist"
    agenda-group "symptoms"
    salience -10
    when
        $found: FoundDisease()
        not(FoundDiseases())
    then
        final FoundDiseases diseases = new FoundDiseases();
        diseases.setDiseases(new ArrayList<FoundDisease>());
        diseases.getDiseases().add($found);

        insert(diseases);
end

rule "Found disease list does exist"
    agenda-group "symptoms"
    salience -15
    when
        $found: FoundDisease()
        $diseases: FoundDiseases(diseases not contains $found)
    then
        $diseases.getDiseases().add($found);

        update($diseases);
end

rule "Possible diseases"
    no-loop
    agenda-group "symptoms"
    salience -100
    when
        $diseases: FoundDiseases()
        $mostLikely: PossibleDisease()
    then
        Collections.sort($diseases.getDiseases(), new DetectedDiseasesComparator());
        final FoundDisease first = $diseases.getDiseases().get(0);
        $mostLikely.setName(first.getDiseaseName());
        update($mostLikely);
end
